name: Build ImmortalWrt (rockchip/armv8)

on:
  workflow_dispatch:
    inputs:
      device_profiles:
        description: "设备 Profile 名称"
        type: choice
        required: true
        default: "friendlyarm_nanopi-r2s"
        options:
          - ariaboard_photonicat
          - armsom_sige3
          - armsom_sige7
          - cyber_cyber3588-aib
          - ezpro_mrkaio-m68s
          - firefly_roc-rk3328-cc
          - firefly_roc-rk3568-pc
          - friendlyarm_nanopc-t4
          - friendlyarm_nanopc-t6
          - friendlyarm_nanopi-r2c
          - friendlyarm_nanopi-r2c-plus
          - friendlyarm_nanopi-r2s
          - friendlyarm_nanopi-r3s
          - friendlyarm_nanopi-r4s
          - friendlyarm_nanopi-r4s-enterprise
          - friendlyarm_nanopi-r4se
          - friendlyarm_nanopi-r5c
          - friendlyarm_nanopi-r5s
          - friendlyarm_nanopi-r6c
          - friendlyarm_nanopi-r6s
          - huake_guangmiao-g4c
          - lunzn_fastrhino-r66s
          - lunzn_fastrhino-r68s
          - lyt_t68m
          - mmbox_anas3035
          - pine64_rock64
          - pine64_rockpro64
          - radxa_cm3-io
          - radxa_e25
          - radxa_rock-3a
          - radxa_rock-3b
          - radxa_rock-3c
          - radxa_rock-4c-plus
          - radxa_rock-4se
          - radxa_rock-5a
          - radxa_rock-5b
          - radxa_rock-pi-4a
          - radxa_rock-pi-e
          - radxa_rock-pi-s
          - radxa_zero-3e
          - radxa_zero-3w
          - sinovoip_bpi-r2-pro
          - xunlong_orangepi-5
          - xunlong_orangepi-5-plus
          - xunlong_orangepi-r1-plus
          - xunlong_orangepi-r1-plus-lts
      build_stability:
        description: "选择系统类型"
        type: choice
        required: true
        default: "snapshot"
        options:
          - snapshot
          - stable
      rootfs_size_mb:
        description: "RootFS 大小 (MB)"
        type: string
        required: true
        default: "8192"
      preinit_ip:
        description: "预设IP地址"
        type: string
        required: true
        default: "192.168.1.1"
      preinit_netmask:
        description: "预设子网掩码"
        type: string
        required: true
        default: "255.255.255.0"
      preinit_broadcast:
        description: "预设广播地址"
        type: string
        required: true
        default: "192.168.1.255"
      custom_packages:
        description: "自定义包（空格分隔，'-'前缀移除默认包）"
        type: string
        required: false
        default: >-
          luci luci-app-firewall luci-app-opkg luci-base luci-lib-ipkg luci-lib-jsonc
          luci-lib-nixio luci-theme-bootstrap block-mount kmod-fs-ext4 kmod-usb-storage
          kmod-usb-storage-uas kmod-usb-ohci kmod-usb-uhci kmod-usb3 dosfstools e2fsprogs fdisk
      release_tag_suffix:
        description: "Release 标签自定义后缀（可选）"
        type: string
        required: false
        default: ""
      enable_verbose_script_log:
        description: "启用详细日志"
        type: boolean
        required: false
        default: false

permissions:
  contents: write
  
jobs:
  build_firmware:
    runs-on: ubuntu-latest
    name: Build Firmware for ${{ github.event.inputs.device_profiles }}
    env:
      SNAPSHOT_IMAGEBUILDER_URL: "https://downloads.immortalwrt.org/snapshots/targets/rockchip/armv8/immortalwrt-imagebuilder-rockchip-armv8.Linux-x86_64.tar.zst"
      STABLE_IMAGEBUILDER_URL: "https://downloads.immortalwrt.org/releases/24.10.1/targets/rockchip/armv8/immortalwrt-imagebuilder-24.10.1-rockchip-armv8.Linux-x86_64.tar.zst"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show build parameters
        run: |
          echo "Device: ${{ github.event.inputs.device_profiles }}"
          echo "Stability: ${{ github.event.inputs.build_stability }}"
          echo "RootFS Size: ${{ github.event.inputs.rootfs_size_mb }}"
          echo "Custom Packages: ${{ github.event.inputs.custom_packages }}"
          echo "Tag Suffix: ${{ github.event.inputs.release_tag_suffix }}"
          echo "Verbose Log: ${{ github.event.inputs.enable_verbose_script_log }}"
          if [ "${{ github.event.inputs.enable_verbose_script_log }}" == "true" ]; then
            set -x
          fi

      - name: Install build dependencies
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends \
            build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk \
            git gettext libssl-dev xsltproc rsync wget curl unzip file ccache python3 python3-pip

      - name: Configure ccache
        run: |
          mkdir -p $GITHUB_WORKSPACE/ccache
          ccache -M 5G
          echo "CCACHE_DIR=$GITHUB_WORKSPACE/ccache" >> $GITHUB_ENV
          echo "USE_CCACHE=1" >> $GITHUB_ENV

      - name: Select ImageBuilder URL
        id: set_imagebuilder_url
        run: |
          if [ "${{ github.event.inputs.build_stability }}" = "snapshot" ]; then
            echo "IMAGEBUILDER_URL=${SNAPSHOT_IMAGEBUILDER_URL}" >> $GITHUB_ENV
          else
            echo "IMAGEBUILDER_URL=${STABLE_IMAGEBUILDER_URL}" >> $GITHUB_ENV
          fi

      - name: Download and extract ImageBuilder
        run: |
          echo "Downloading ImageBuilder: $IMAGEBUILDER_URL"
          curl -L "$IMAGEBUILDER_URL" -o immortalwrt-imagebuilder.tar.zst
          mkdir -p imagebuilder
          tar --zstd -xf immortalwrt-imagebuilder.tar.zst -C imagebuilder --strip-components=1
          echo "ImageBuilder extracted."

      - name: Clean previous build
        working-directory: ${{ github.workspace }}/imagebuilder
        run: |
          make clean || true
      
      - name: Set custom .config options (rootfs/ip/netmask/broadcast)
        working-directory: ${{ github.workspace }}/imagebuilder
        run: |
          set_config() {
            local key="$1"
            local value="$2"
            grep -q "^${key}=" .config && \
              sed -i "s|^${key}=.*|${key}=${value}|" .config || \
              echo "${key}=${value}" >> .config
          }
          set_config CONFIG_TARGET_ROOTFS_PARTSIZE "${{ github.event.inputs.rootfs_size_mb }}"
          set_config CONFIG_TARGET_PREINIT_IP "\"${{ github.event.inputs.preinit_ip }}\""
          set_config CONFIG_TARGET_PREINIT_NETMASK "\"${{ github.event.inputs.preinit_netmask }}\""
          set_config CONFIG_TARGET_PREINIT_BROADCAST "\"${{ github.event.inputs.preinit_broadcast }}\""
          grep -E 'CONFIG_TARGET_ROOTFS_PARTSIZE|CONFIG_TARGET_PREINIT_IP|CONFIG_TARGET_PREINIT_NETMASK|CONFIG_TARGET_PREINIT_BROADCAST' .config

  
      - name: Build firmware
        working-directory: ${{ github.workspace }}/imagebuilder
        run: |
          echo "Starting firmware build..."
          PACKAGES_TO_BUILD="${{ github.event.inputs.custom_packages }}"
          [ -z "$PACKAGES_TO_BUILD" ] && PACKAGES_ARG="" || PACKAGES_ARG="PACKAGES=\"$PACKAGES_TO_BUILD\""
          PROFILES_ARG="PROFILE=\"${{ github.event.inputs.device_profiles }}\""
          CURRENT_DATE=$(date +%Y%m%d)
          SANITIZED_PROFILES=$(echo "${{ github.event.inputs.device_profiles }}" | tr ' ' '_')
          EXTRA_SUFFIX="-${SANITIZED_PROFILES}-${CURRENT_DATE}"
          if [ -n "${{ github.event.inputs.release_tag_suffix }}" ]; then
            EXTRA_SUFFIX="${EXTRA_SUFFIX}-${{ github.event.inputs.release_tag_suffix }}"
          fi
          EXTRA_IMAGE_NAME_SUFFIX_ARG="EXTRA_IMAGE_NAME_SUFFIX=${EXTRA_SUFFIX}"
          BUILD_COMMAND="make image -j$(nproc) $PROFILES_ARG $ROOTFS_SIZE_ARG $EXTRA_IMAGE_NAME_SUFFIX_ARG V=s"
          echo "Build command: $BUILD_COMMAND"
          eval $BUILD_COMMAND
          echo "Firmware build completed."

      - name: Collect images from tmp to bin dir
        working-directory: ${{ github.workspace }}/imagebuilder
        run: |
          mkdir -p ./bin/targets/rockchip/armv8
          find ./build_dir/ -type f -name '*.img*' -exec cp {} ./bin/targets/rockchip/armv8/ \;
          find ./build_dir/ -type f -name '*.manifest' -exec cp {} ./bin/targets/rockchip/armv8/ \;
          find ./build_dir/ -type f -name '*buildinfo' -exec cp {} ./bin/targets/rockchip/armv8/ \;

      - name: Prepare artifacts for release
        id: prepare_artifacts
        run: |
          ARTIFACT_DIR="${{ github.workspace }}/imagebuilder/bin/targets/rockchip/armv8"
          if [ ! -d "$ARTIFACT_DIR" ] || [ -z "$(ls -A $ARTIFACT_DIR)" ]; then
            echo "Error: Artifact directory $ARTIFACT_DIR is empty or does not exist."
            exit 1
          fi
          cd "$ARTIFACT_DIR"
          ls -lh

          # 获取当前日期和时间
          NOW="$(date '+%Y-%m-%d %H:%M')"
          SANITIZED_PROFILES=$(echo "${{ github.event.inputs.device_profiles }}" | tr ' ' '_' | tr -cs 'a-zA-Z0-9_.-' '_' | cut -c1-50)
          STABILITY="${{ github.event.inputs.build_stability }}"
          [ "$STABILITY" = "snapshot" ] && STABILITY="Snapshot" || STABILITY="Stable"
          SUFFIX="${{ github.event.inputs.release_tag_suffix }}"
          # 组装 Release Tag（日期时间在前）
          RELEASE_TAG="${NOW//[: ]/-}_ImmortalWrt_${SANITIZED_PROFILES}_${STABILITY}"
          [ -n "$SUFFIX" ] && RELEASE_TAG="${RELEASE_TAG}_$SUFFIX"

          # 标题（给 release 用，也方便后续 body 展示）
          RELEASE_TITLE="${NOW} ImmortalWrt ${SANITIZED_PROFILES} ${STABILITY}"

          echo "Release tag: $RELEASE_TAG"
          echo "Release title: $RELEASE_TITLE"
          echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "release_title=${RELEASE_TITLE}" >> $GITHUB_OUTPUT
          echo "artifact_path=$ARTIFACT_DIR" >> $GITHUB_OUTPUT
        working-directory: ${{ github.workspace }}

      - name: List Generated Files for Debugging
        working-directory: ${{ github.workspace }}/imagebuilder/bin/targets/rockchip/armv8
        run: |
          echo "Listing files in ${{ github.workspace }}/imagebuilder/bin/targets/rockchip/armv8:"
          ls -Ralh

      - name: Upload firmware to Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.WORKFLOW_WRITE_TOKEN }}
          tag_name: ${{ steps.prepare_release.outputs.release_tag }}
          name: ${{ steps.prepare_release.outputs.release_title }}
          body: |
            ImmortalWrt firmware compiled via GitHub Actions.

            **Build Date:** ${{ steps.prepare_release.outputs.release_title }}
            **Target:** rockchip/armv8
            **Device Profile:** ${{ github.event.inputs.device_profiles }}
            **RootFS Size:** ${{ github.event.inputs.rootfs_size_mb }} MB
            **Build Stability:** ${{ github.event.inputs.build_stability }}
            **ImageBuilder URL:** ${{ env.IMAGEBUILDER_URL }}

            **Preinit Network Settings**
            - **IP Address:** ${{ github.event.inputs.preinit_ip }}
            - **Netmask:** ${{ github.event.inputs.preinit_netmask }}
            - **Broadcast:** ${{ github.event.inputs.preinit_broadcast }}

            **Custom Packages:**
            ```
            ${{ github.event.inputs.custom_packages }}
            ```

            **Workflow Run ID:** ${{ github.run_id }}
            **Commit:** ${{ github.sha }}

          files: |
            ${{ steps.prepare_artifacts.outputs.artifact_path }}/*.img.gz
            ${{ steps.prepare_artifacts.outputs.artifact_path }}/*.img
            ${{ steps.prepare_artifacts.outputs.artifact_path }}/*.manifest
            ${{ steps.prepare_artifacts.outputs.artifact_path }}/*.json
            ${{ steps.prepare_artifacts.outputs.artifact_path }}/sha256sums
          fail_on_unmatched_files: false
