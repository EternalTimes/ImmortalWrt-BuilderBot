name: Build ImmortalWrt (rockchip/armv8)

on:
  workflow_dispatch:
    inputs:
      device_profiles:
        description: "设备 Profile 名称"
        type: choice
        required: true
        default: "friendlyarm_nanopi-r2s"
        options:
          - friendlyarm_nanopi-r2s  # 这里会自动生成
      build_stability:
        description: "选择系统类型"
        type: choice
        required: true
        default: "snapshot"
        options:
          - snapshot
          - stable
      rootfs_size_mb:
        description: "RootFS 大小 (MB)"
        type: string
        required: true
        default: "8192"
      custom_packages:
        description: "自定义包（空格分隔，'-'前缀移除默认包）"
        type: string
        required: false
        default: >-
          luci luci-app-firewall luci-app-opkg luci-base luci-lib-ipkg luci-lib-jsonc
          luci-lib-nixio luci-theme-bootstrap block-mount kmod-fs-ext4 kmod-usb-storage
          kmod-usb-storage-uas kmod-usb-ohci kmod-usb-uhci kmod-usb3 dosfstools e2fsprogs fdisk
      release_tag_suffix:
        description: "Release 标签自定义后缀（可选）"
        type: string
        required: false
        default: ""
      enable_verbose_script_log:
        description: "启用详细日志"
        type: boolean
        required: false
        default: false

jobs:
  build_firmware:
    runs-on: ubuntu-latest
    name: Build Firmware for ${{ github.event.inputs.device_profiles }}
    env:
      SNAPSHOT_IMAGEBUILDER_URL: ""   # update_workflow_inputs.py 自动写入
      STABLE_IMAGEBUILDER_URL: ""     # update_workflow_inputs.py 自动写入

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show build parameters
        run: |
          echo "Device: ${{ github.event.inputs.device_profiles }}"
          echo "Stability: ${{ github.event.inputs.build_stability }}"
          echo "RootFS Size: ${{ github.event.inputs.rootfs_size_mb }}"
          echo "Custom Packages: ${{ github.event.inputs.custom_packages }}"
          echo "Tag Suffix: ${{ github.event.inputs.release_tag_suffix }}"
          echo "Verbose Log: ${{ github.event.inputs.enable_verbose_script_log }}"
          if [ "${{ github.event.inputs.enable_verbose_script_log }}" == "true" ]; then
            set -x
          fi

      - name: Install build dependencies
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends \
            build-essential libncurses5-dev libncursesw5-dev zlib1g-dev gawk \
            git gettext libssl-dev xsltproc rsync wget curl unzip file ccache python3 python3-pip

      - name: Configure ccache
        run: |
          mkdir -p $GITHUB_WORKSPACE/ccache
          ccache -M 5G
          echo "CCACHE_DIR=$GITHUB_WORKSPACE/ccache" >> $GITHUB_ENV
          echo "USE_CCACHE=1" >> $GITHUB_ENV

      - name: Select ImageBuilder URL
        id: set_imagebuilder_url
        run: |
          if [ "${{ github.event.inputs.build_stability }}" = "snapshot" ]; then
            echo "IMAGEBUILDER_URL=${SNAPSHOT_IMAGEBUILDER_URL}" >> $GITHUB_ENV
          else
            echo "IMAGEBUILDER_URL=${STABLE_IMAGEBUILDER_URL}" >> $GITHUB_ENV
          fi

      - name: Download and extract ImageBuilder
        run: |
          echo "Downloading ImageBuilder: $IMAGEBUILDER_URL"
          curl -L "$IMAGEBUILDER_URL" -o immortalwrt-imagebuilder.tar.zst
          mkdir -p imagebuilder
          tar --zstd -xf immortalwrt-imagebuilder.tar.zst -C imagebuilder --strip-components=1
          echo "ImageBuilder extracted."

      - name: Clean previous build
        working-directory: ${{ github.workspace }}/imagebuilder
        run: |
          make clean || true

      - name: Build firmware
        working-directory: ${{ github.workspace }}/imagebuilder
        run: |
          echo "Starting firmware build..."
          PACKAGES_TO_BUILD="${{ github.event.inputs.custom_packages }}"
          [ -z "$PACKAGES_TO_BUILD" ] && PACKAGES_ARG="" || PACKAGES_ARG="PACKAGES=\"$PACKAGES_TO_BUILD\""
          ROOTFS_SIZE_ARG="CONFIG_TARGET_ROOTFS_PARTSIZE=${{ github.event.inputs.rootfs_size_mb }}"
          PROFILES_ARG="PROFILES=\"${{ github.event.inputs.device_profiles }}\""
          CURRENT_DATE=$(date +%Y%m%d)
          SANITIZED_PROFILES=$(echo "${{ github.event.inputs.device_profiles }}" | tr ' ' '_')
          EXTRA_SUFFIX="-${SANITIZED_PROFILES}-${CURRENT_DATE}"
          if [ -n "${{ github.event.inputs.release_tag_suffix }}" ]; then
            EXTRA_SUFFIX="${EXTRA_SUFFIX}-${{ github.event.inputs.release_tag_suffix }}"
          fi
          EXTRA_IMAGE_NAME_SUFFIX_ARG="EXTRA_IMAGE_NAME_SUFFIX=${EXTRA_SUFFIX}"
          BUILD_COMMAND="make image -j$(nproc) $PROFILES_ARG $PACKAGES_ARG $ROOTFS_SIZE_ARG $EXTRA_IMAGE_NAME_SUFFIX_ARG V=s"
          echo "Build command: $BUILD_COMMAND"
          eval $BUILD_COMMAND
          echo "Firmware build completed."

      - name: Prepare artifacts for release
        id: prepare_artifacts
        run: |
          ARTIFACT_DIR="${{ github.workspace }}/imagebuilder/bin/targets/rockchip/armv8"
          if [ ! -d "$ARTIFACT_DIR" ] || [ -z "$(ls -A $ARTIFACT_DIR)" ]; then
            echo "Error: Artifact directory $ARTIFACT_DIR is empty or does not exist."
            exit 1
          fi
          cd $ARTIFACT_DIR
          ls -lh

          CURRENT_DATE_TAG=$(date +%Y.%m.%d)
          SANITIZED_PROFILES_TAG=$(echo "${{ github.event.inputs.device_profiles }}" | tr ' ' '_' | tr -cs 'a-zA-Z0-9_.-' '_' | cut -c1-50)
          RELEASE_TAG="immortalwrt-${SANITIZED_PROFILES_TAG}-${CURRENT_DATE_TAG}"
          if [ -n "${{ github.event.inputs.release_tag_suffix }}" ]; then
            RELEASE_TAG="${RELEASE_TAG}-${{ github.event.inputs.release_tag_suffix }}"
          fi
          if [ "${{ github.event.inputs.build_stability }}" != "snapshot" ]; then
            RELEASE_TAG="${RELEASE_TAG}-${{ github.event.inputs.build_stability }}"
          fi
          RELEASE_TAG=$(echo "$RELEASE_TAG" | tr -cs 'a-zA-Z0-9_.-' '_')

          echo "Release tag: $RELEASE_TAG"
          echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "artifact_path=${ARTIFACT_DIR}" >> $GITHUB_OUTPUT
        working-directory: ${{ github.workspace }}

      - name: List Generated Files for Debugging
        working-directory: ${{ github.workspace }}/imagebuilder/bin/targets/rockchip/armv8
        run: |
          echo "Listing files in ${{ github.workspace }}/imagebuilder/bin/targets/rockchip/armv8:"
          ls -Ralh

      - name: Upload firmware to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.prepare_artifacts.outputs.release_tag }}
          name: "ImmortalWrt ${{ steps.prepare_artifacts.outputs.release_tag }} (rockchip/armv8)"
          body: |
            ImmortalWrt firmware compiled via GitHub Actions.
            **Target:** rockchip/armv8
            **Device Profile(s):** ${{ github.event.inputs.device_profiles }}
            **RootFS Size:** ${{ github.event.inputs.rootfs_size_mb }}MB
            **Custom Packages:** `${{ github.event.inputs.custom_packages }}`
            **Build Stability Preference:** ${{ github.event.inputs.build_stability }}
            **ImageBuilder URL:** $IMAGEBUILDER_URL
            **Workflow Run ID:** ${{ github.run_id }}
            **Commit:** ${{ github.sha }}
          files: |
            ${{ steps.prepare_artifacts.outputs.artifact_path }}/*.img.gz
            ${{ steps.prepare_artifacts.outputs.artifact_path }}/*.img
            ${{ steps.prepare_artifacts.outputs.artifact_path }}/*.manifest
            ${{ steps.prepare_artifacts.outputs.artifact_path }}/sha250*
            ${{ steps.prepare_artifacts.outputs.artifact_path }}/sha256sums
            ${{ steps.prepare_artifacts.outputs.artifact_path }}/version.buildinfo
            ${{ steps.prepare_artifacts.outputs.artifact_path }}/config.buildinfo
            ${{ steps.prepare_artifacts.outputs.artifact_path }}/feeds.buildinfo
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
